import java.util.*;

class Solution {

    public double dfs(String src, String target, double prod, HashSet<String> visited,
                      HashMap<String, HashMap<String, Double>> map) {
        // If the source is not in the graph, return -1
        if (!map.containsKey(src)) return -1.0;

        // If direct connection exists
        if (map.get(src).containsKey(target)) {
            return prod * map.get(src).get(target);
        }

        visited.add(src);

        double ret = -1.0;
        for (String neighbour : map.get(src).keySet()) {
            if (!visited.contains(neighbour)) {
                ret = dfs(neighbour, target, prod * map.get(src).get(neighbour), visited, map);
                if (ret != -1.0) {
                    break;
                }
            }
        }

        visited.remove(src);  // backtrack
        return ret;
    }

    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        HashMap<String, HashMap<String, Double>> map = new HashMap<>();

        // Build the graph
        for (int i = 0; i < equations.size(); i++) {
            String a = equations.get(i).get(0);
            String b = equations.get(i).get(1);
            double val = values[i];

            map.putIfAbsent(a, new HashMap<>());
            map.putIfAbsent(b, new HashMap<>());
            map.get(a).put(b, val);
            map.get(b).put(a, 1.0 / val);
        }

        // Answer queries
        double[] result = new double[queries.size()];
        for (int i = 0; i < queries.size(); i++) {
            String src = queries.get(i).get(0);
            String target = queries.get(i).get(1);

            if (!map.containsKey(src) || !map.containsKey(target)) {
                result[i] = -1.0;
            } else if (src.equals(target)) {
                result[i] = 1.0;
            } else {
                result[i] = dfs(src, target, 1.0, new HashSet<>(), map);
            }
        }

        return result;
    }

    // --- For testing ---
    public static void main(String[] args) {
        Solution sol = new Solution();

        List<List<String>> equations = Arrays.asList(
            Arrays.asList("a", "b"),
            Arrays.asList("b", "c")
        );
        double[] values = {2.0, 3.0};

        List<List<String>> queries = Arrays.asList(
            Arrays.asList("a", "c"),
            Arrays.asList("b", "a"),
            Arrays.asList("a", "e"),
            Arrays.asList("a", "a"),
            Arrays.asList("x", "x")
        );

        double[] ans = sol.calcEquation(equations, values, queries);
        System.out.println(Arrays.toString(ans));
    }
}
