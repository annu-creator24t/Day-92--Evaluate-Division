class Solution {
    private Map<Node, Node> visited = new HashMap<>();
    
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }

        // If already visited, return the cloned node
        if (visited.containsKey(node)) {
            return visited.get(node);
        }

        // Create a new node with the value of the old node
        Node clone = new Node(node.val, new ArrayList<>());
        visited.put(nodeimport java.util.*;

class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        // Build graph
        Map<String, Map<String, Double>> graph = new HashMap<>();
        
        for (int i = 0; i < equations.size(); i++) {
            String a = equations.get(i).get(0);
            String b = equations.get(i).get(1);
            double val = values[i];
            
            graph.putIfAbsent(a, new HashMap<>());
            graph.putIfAbsent(b, new HashMap<>());
            
            graph.get(a).put(b, val);
            graph.get(b).put(a, 1.0 / val);
        }
        
        double[] results = new double[queries.size()];
        
        for (int i = 0; i < queries.size(); i++) {
            String src = queries.get(i).get(0);
            String dst = queries.get(i).get(1);
            
            if (!graph.containsKey(src) || !graph.containsKey(dst)) {
                results[i] = -1.0;
            } else if (src.equals(dst)) {
                results[i] = 1.0;
            } else {
                Set<String> visited = new HashSet<>();
                results[i] = dfs(src, dst, graph, visited, 1.0);
            }
        }
        
        return results;
    }
    
    private double dfs(String src, String dst, Map<String, Map<String, Double>> graph, Set<String> visited, double product) {
        if (src.equals(dst)) {
            return product;
        }
        
        visited.add(src);
        
        for (Map.Entry<String, Double> neighbor : graph.get(src).entrySet()) {
            if (!visited.contains(neighbor.getKey())) {
                double result = dfs(neighbor.getKey(), dst, graph, visited, product * neighbor.getValue());
                if (result != -1.0) {
                    return result;
                }
            }
        }
        
        return -1.0;
    }
}
, clone);

        // Clone the neighbors recursively
        for (Node neighbor : node.neighbors) {
            clone.neighbors.add(cloneGraph(neighbor));
        }

        return clone;
    }
}